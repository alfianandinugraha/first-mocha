{
  "stats": {
    "suites": 4,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2022-02-28T18:36:13.666Z",
    "end": "2022-02-28T18:36:13.762Z",
    "duration": 96,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "affd404c-d5f9-48b5-a0dd-f281f64f924b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6d7b4cf1-3a18-4ff6-b345-4bed4dff2626",
          "title": "Auth.js test",
          "fullFile": "F:\\project-local\\Mocha\\first-mocha\\tests\\Auth.test.js",
          "file": "\\tests\\Auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Auth.js test\"",
              "fullTitle": "Auth.js test \"before each\" hook in \"Auth.js test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "auth = new Auth();",
              "err": {},
              "uuid": "0f0895e8-eeac-4346-85c4-5b9b6592ddd3",
              "parentUUID": "6d7b4cf1-3a18-4ff6-b345-4bed4dff2626",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Register user",
              "fullTitle": "Auth.js test Register user",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = \"hello@hello.com\";\nconst password = \"hello\";\nexpect(auth.register(email, password)).to.be.deep.equal({\n  email,\n  password,\n  message: Auth.messages.REGISTER_SUCCESS,\n});",
              "err": {},
              "uuid": "bafccb81-8809-4a22-b5d0-c1a5ab43fb78",
              "parentUUID": "6d7b4cf1-3a18-4ff6-b345-4bed4dff2626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Throw error on register() if database not connected",
              "fullTitle": "Auth.js test Throw error on register() if database not connected",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = \"hello@hello.com\";\nconst password = \"hello\";\nconst databaseMock = stub(Database.prototype, \"isConnect\");\ndatabaseMock.returns(false);\nexpect(() => auth.register(email, password)).to.throw(\n  Database.messages.NOT_CONNECT\n);\ndatabaseMock.restore();",
              "err": {},
              "uuid": "68c16553-f0dc-4df6-bcda-7b7764a4da80",
              "parentUUID": "6d7b4cf1-3a18-4ff6-b345-4bed4dff2626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Register user with hello.com email",
              "fullTitle": "Auth.js test Register user with hello.com email",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = \"hello.com\";\nconst password = \"hello\";\nexpect(() => auth.register(email, password)).to.throw(\n  Validator.messages.INVALID_EMAIL\n);",
              "err": {},
              "uuid": "39b38b80-688d-4944-9d1d-c7e939395103",
              "parentUUID": "6d7b4cf1-3a18-4ff6-b345-4bed4dff2626",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validator.isEmail() called on register()",
              "fullTitle": "Auth.js test Validator.isEmail() called on register()",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = \"hello@hello.com\";\nconst password = \"hello\";\nconst validatorSpy = spy(Validator, \"isEmail\");\nauth.register(email, password);\nexpect(validatorSpy.calledOnce).to.be.true;",
              "err": {},
              "uuid": "5fbedd72-646e-4479-80cd-6a481ecdfc4e",
              "parentUUID": "6d7b4cf1-3a18-4ff6-b345-4bed4dff2626",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bafccb81-8809-4a22-b5d0-c1a5ab43fb78",
            "68c16553-f0dc-4df6-bcda-7b7764a4da80",
            "39b38b80-688d-4944-9d1d-c7e939395103",
            "5fbedd72-646e-4479-80cd-6a481ecdfc4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "23e8aa62-607a-4b96-afd2-600de90348aa",
          "title": "Calculate.js test",
          "fullFile": "F:\\project-local\\Mocha\\first-mocha\\tests\\Calculate.test.js",
          "file": "\\tests\\Calculate.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Calculate.js test\"",
              "fullTitle": "Calculate.js test \"before each\" hook in \"Calculate.js test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calculate = new Calculate();",
              "err": {},
              "uuid": "bac42073-30fd-44b6-9b58-2231d963943b",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Arguments of add() should be number",
              "fullTitle": "Calculate.js test Arguments of add() should be number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => calculate.add(\"2\", \"1\")).to.throw(\n  Calculate.messages.INVALID_TYPES\n);",
              "err": {},
              "uuid": "0e7339ea-2727-45c2-bf36-7eda74c50e94",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Argument of addBy2() should be a number",
              "fullTitle": "Calculate.js test Argument of addBy2() should be a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => calculate.addBy2(\"9\")).to.throw(\n  Calculate.messages.INVALID_TYPES\n);",
              "err": {},
              "uuid": "6ab2fd2a-f37b-45c2-a6ff-5d1851151f26",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Arguments of addCb() should be number and a function",
              "fullTitle": "Calculate.js test Arguments of addCb() should be number and a function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => calculate.addCb(\"9\", \"2\", true)).to.throw(\n  Calculate.messages.INVALID_TYPES\n);",
              "err": {},
              "uuid": "241822b3-269d-4a53-923a-676ccf492357",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Calculate 2 + 5 = 7",
              "fullTitle": "Calculate.js test Calculate 2 + 5 = 7",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculate.add(2, 5)).to.be.equal(7);",
              "err": {},
              "uuid": "74c0d11c-8f7a-43f7-b068-d75489f2b99f",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Calculate 2 + 2 != 5",
              "fullTitle": "Calculate.js test Calculate 2 + 2 != 5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculate.add(2, 2)).to.not.equal(5);",
              "err": {},
              "uuid": "fb446942-8edd-4555-b39a-0a282afea320",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Calculate 5 with addBy2()",
              "fullTitle": "Calculate.js test Calculate 5 with addBy2()",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculate.addBy2(5)).to.be.equal(7);",
              "err": {},
              "uuid": "105c7648-8709-4b95-b1c4-ddfad260ae78",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spy add() on addBy2()",
              "fullTitle": "Calculate.js test Spy add() on addBy2()",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const calculateSpy = spy(calculate, \"add\");\ncalculate.addBy2(2);\nexpect(calculateSpy.calledOnce).to.be.true;",
              "err": {},
              "uuid": "844c4899-5dbe-487f-9206-e5fc004542c5",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spy argument add() in addBy2()",
              "fullTitle": "Calculate.js test Spy argument add() in addBy2()",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const num = 5;\nconst calculateSpy = spy(calculate, \"add\");\ncalculate.addBy2(5);\nexpect(calculateSpy.calledOnceWith(num, 2)).to.be.true;",
              "err": {},
              "uuid": "ffb8d6b2-daa8-4caa-8909-d08baf10c3e5",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Spy callback in addCb()",
              "fullTitle": "Calculate.js test Spy callback in addCb()",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cbResult = spy();\ncalculate.addCb(7, 2, cbResult);\nexpect(cbResult.calledOnce).to.be.true;",
              "err": {},
              "uuid": "d57171d6-73eb-4ec7-be6a-6f88ca3269b1",
              "parentUUID": "23e8aa62-607a-4b96-afd2-600de90348aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e7339ea-2727-45c2-bf36-7eda74c50e94",
            "6ab2fd2a-f37b-45c2-a6ff-5d1851151f26",
            "241822b3-269d-4a53-923a-676ccf492357",
            "74c0d11c-8f7a-43f7-b068-d75489f2b99f",
            "fb446942-8edd-4555-b39a-0a282afea320",
            "105c7648-8709-4b95-b1c4-ddfad260ae78",
            "844c4899-5dbe-487f-9206-e5fc004542c5",
            "ffb8d6b2-daa8-4caa-8909-d08baf10c3e5",
            "d57171d6-73eb-4ec7-be6a-6f88ca3269b1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "be975995-1db3-43fc-ac81-0d2d2d6d4d1c",
          "title": "Product.js test",
          "fullFile": "F:\\project-local\\Mocha\\first-mocha\\tests\\Product.test.js",
          "file": "\\tests\\Product.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Product.js test\"",
              "fullTitle": "Product.js test \"before each\" hook in \"Product.js test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "database = new Database();\nproduct = new Product(database);",
              "err": {},
              "uuid": "0eb9e73a-ac17-4330-ad3d-de187b8a3f70",
              "parentUUID": "be975995-1db3-43fc-ac81-0d2d2d6d4d1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check database name with mock",
              "fullTitle": "Product.js test Check database name with mock",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let databaseMock = mock(database);\ndatabaseMock.expects(\"DB\").once().returns(\"TEST_DB\");\nexpect(product.getDB()).to.be.equal(\"TEST_DB\");",
              "err": {},
              "uuid": "fc599e6c-1355-4c05-b0b8-216cbc1b0f19",
              "parentUUID": "be975995-1db3-43fc-ac81-0d2d2d6d4d1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify isConnect() called",
              "fullTitle": "Product.js test Verify isConnect() called",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let databaseMock = mock(database);\nlet isConnectMock = databaseMock.expects(\"isConnect\").returns(true);\nproduct.find(\"84719\");\nexpect(isConnectMock.calledOnce).to.be.true;",
              "err": {},
              "uuid": "c7116942-2973-415c-9221-c2fcb0dcf2ab",
              "parentUUID": "be975995-1db3-43fc-ac81-0d2d2d6d4d1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Throw error when database is not connected",
              "fullTitle": "Product.js test Throw error when database is not connected",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let databaseStub = stub(database, \"isConnect\");\ndatabaseStub.returns(false);\nexpect(() => product.find(\"2389\")).to.throw(Database.messages.NOT_CONNECT);",
              "err": {},
              "uuid": "2549db63-f549-4e1d-a2e7-c8a348ee250a",
              "parentUUID": "be975995-1db3-43fc-ac81-0d2d2d6d4d1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc599e6c-1355-4c05-b0b8-216cbc1b0f19",
            "c7116942-2973-415c-9221-c2fcb0dcf2ab",
            "2549db63-f549-4e1d-a2e7-c8a348ee250a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a9a7abda-50ab-464f-938c-aae02b9bae7f",
          "title": "Validator.js test",
          "fullFile": "F:\\project-local\\Mocha\\first-mocha\\tests\\Validator.test.js",
          "file": "\\tests\\Validator.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check hello@hello.com email",
              "fullTitle": "Validator.js test Check hello@hello.com email",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(Validator.isEmail(\"hello@hello.com\")).to.be.true;",
              "err": {},
              "uuid": "71f8c723-f9d4-4099-a52d-c3e3cebec49d",
              "parentUUID": "a9a7abda-50ab-464f-938c-aae02b9bae7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hello.com email",
              "fullTitle": "Validator.js test Check hello.com email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(Validator.isEmail(\"hello.com\")).to.be.false;",
              "err": {},
              "uuid": "f22d038b-20d3-4559-b4f0-02334205974a",
              "parentUUID": "a9a7abda-50ab-464f-938c-aae02b9bae7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "71f8c723-f9d4-4099-a52d-c3e3cebec49d",
            "f22d038b-20d3-4559-b4f0-02334205974a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "reports",
        "reportFilename": "index"
      },
      "version": "6.1.0"
    }
  }
}